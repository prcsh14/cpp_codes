#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
using namespace chrono;

#ifdef prcsh
#include "debug.h"
#else
#define dbg(...) ;
#define debug(...) ;
#define crndl ;
#endif

#define int         long long
#define pb          push_back
#define fst         first
#define sec         second
#define endl        '\n'
#define rep(i,a,b)   for(int i=a;i<b;i++)
typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key

int power(int a, int b, int mod = LONG_LONG_MAX) {int res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
int mminvprime(int a, int b) {return power(a, b - 2, b);}
int mod_add(int a, int b, int m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
int mod_mul(int a, int b, int m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
int mod_sub(int a, int b, int m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
int mod_div(int a, int b, int m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m

//====================================================================================================================================================================================


void fxn(){
    //treat pbds as normal set for easy understandings
    //here it stores pair or int and their indexes works as a multiset but with indexes 
    pbds ok;
    vector<int> arr = {1, 2, 3, 4, 5, -1, -1, -2};
    //k is the window size 
    int n = 8 , k = 5;
    vector<int> ans(n-k+1); //no of windows = n-k+1 so that many medians for each of them 
    //first window
    for(int i = 0 ; i<k ; i++){
        ok.insert({arr[i],i}); //
    }
    //median of first window
    pair<int,int> median;
    median = *ok.find_by_order(k/2); //k is the window size and this is sorted inside the ppds 
    //so median will be at the middle of that sorted part 

    //here we get the first median 
    ans[0] = median.first;
    //we will keep a counter to count the window number being calculated 
    int ct = 1;
    //now for the other windows 
    for(int j = k ; j<n ; j++){
        //we follow the same add and remove that traditional sliding window technique

        //firstly we add
        ok.insert({arr[j] , j});

        //then we remove the starting element in the window
        pair<int,int> remove = {arr[j-k] , j-k};
        ok.erase(remove);

        //now calculate the new median
        median = *ok.find_by_order(k/2);
        ans[ct] = median.first;
        ct++;
    }

    for(auto it : ans) cout<<it<<" ";
        cout<<endl;
}

signed main(){
    #ifdef prcsh
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    freopen("error.txt", "w", stderr);
    #endif
    fxn();
   return 0;
}
